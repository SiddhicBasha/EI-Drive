// Builder Pattern

class Car {
    private String engine;
    private String seats;
    private String GPS;

    public void setEngine(String engine) {
        this.engine = engine;
    }

    public void setSeats(String seats) {
        this.seats = seats;
    }

    public void setGPS(String GPS) {
        this.GPS = GPS;
    }

    @Override
    public String toString() {
        return "Car [engine=" + engine + ", seats=" + seats + ", GPS=" + GPS + "]";
    }
}

interface CarBuilder {
    void buildEngine();
    void buildSeats();
    void buildGPS();
    Car getResult();
}

class SportsCarBuilder implements CarBuilder {
    private Car car;

    public SportsCarBuilder() {
        this.car = new Car();
    }

    @Override
    public void buildEngine() {
        car.setEngine("V8 Engine");
    }

    @Override
    public void buildSeats() {
        car.setSeats("Sports Seats");
    }

    @Override
    public void buildGPS() {
        car.setGPS("Advanced GPS");
    }

    @Override
    public Car getResult() {
        return car;
    }
}

class SUVBuilder implements CarBuilder {
    private Car car;

    public SUVBuilder() {
        this.car = new Car();
    }

    @Override
    public void buildEngine() {
        car.setEngine("V6 Engine");
    }

    @Override
    public void buildSeats() {
        car.setSeats("Leather Seats");
    }

    @Override
    public void buildGPS() {
        car.setGPS("Basic GPS");
    }

    @Override
    public Car getResult() {
        return car;
    }
}

class Director {
    public void constructSportsCar(CarBuilder builder) {
        builder.buildEngine();
        builder.buildSeats();
        builder.buildGPS();
    }

    public void constructSUV(CarBuilder builder) {
        builder.buildEngine();
        builder.buildSeats();
        builder.buildGPS();
    }
}

public class BuilderPatternDemo {
    public static void main(String[] args) {
        Director director = new Director();

        CarBuilder sportsCarBuilder = new SportsCarBuilder();
        director.constructSportsCar(sportsCarBuilder);
        Car sportsCar = sportsCarBuilder.getResult();
        System.out.println("Sports Car built:\n" + sportsCar);

        CarBuilder suvBuilder = new SUVBuilder();
        director.constructSUV(suvBuilder);
        Car suv = suvBuilder.getResult();
        System.out.println("SUV built:\n" + suv);
    }
}
